{"ast":null,"code":"var _jsxFileName = \"/Users/andrea/Desktop/ITS Prodigi/Seacom/Application/Todo/Full Stack ToDo login elasticEmongo/client/src/App.js\",\n  _s2 = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_TASKS, TASK_DONE, DELETE_TASK, UPDATE_TITLE, ADD_TASK } from './queries/query';\nimport './App.css';\nimport Task from './components/Task';\nimport React from 'react';\nimport TaskForm from './components/TaskForm';\nimport DropdownMenu from './components/navbar/dropdown';\nimport Navbar from './components/navbar/nav';\nimport Navitem from './components/navbar/item';\nimport AddTask from './components/functions/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nfunction App() {\n  _s2();\n  var _tasksData$tasks,\n    _s = $RefreshSig$();\n  const currentUserToken = JSON.parse(localStorage.getItem('currentUser'));\n  const currentUserName = JSON.parse(localStorage.getItem('currentUserName'));\n  const {\n    data: tasksData\n  } = useQuery(GET_TASKS, {\n    variables: {\n      token: currentUserToken,\n      userName: currentUserName\n    }\n  });\n  const [updateTitleMutation] = useMutation(UPDATE_TITLE);\n  const [deletedTaskMutation] = useMutation(DELETE_TASK);\n  const [updateTaskDoneMutation] = useMutation(TASK_DONE);\n  const tasks = (_tasksData$tasks = tasksData === null || tasksData === void 0 ? void 0 : tasksData.tasks) !== null && _tasksData$tasks !== void 0 ? _tasksData$tasks : [];\n  const numberComplete = tasks.filter(t => t.done).length;\n  const numberTotal = tasks.length;\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    console.log('action from user:' + currentUserToken);\n  }, [tasks]);\n  function AddTask(taskName) {\n    _s();\n    const [addTaskMutation] = useMutation(ADD_TASK);\n    addTaskMutation({\n      variables: {\n        input: {\n          name: taskName\n        },\n        token: currentUserToken,\n        userName: currentUserName\n      },\n      update: (cache, _ref) => {\n        let {\n          data\n        } = _ref;\n        const existingTasks = cache.readQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          }\n        });\n        const newTask = {\n          userName: currentUserName,\n          token: currentUserToken,\n          taskName: data.newTask.taskName,\n          done: false,\n          id: data.newTask.id\n        };\n        const updatedTasks = [...existingTasks.tasks, newTask];\n        cache.writeQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          },\n          data: {\n            tasks: updatedTasks\n          }\n        });\n      }\n    });\n  }\n  _s(AddTask, \"j9g40Y3FmQXIoESPob4ZYDF3oE8=\", false, function () {\n    return [useMutation];\n  });\n  function removeTask(index) {\n    const taskId = tasksData.tasks[index].id;\n    deletedTaskMutation({\n      variables: {\n        id: taskId,\n        token: currentUserToken\n      },\n      update: cache => {\n        const existingTasks = cache.readQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          }\n        });\n        const updatedTasks = existingTasks.tasks.filter(task => task.id !== taskId);\n        cache.writeQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          },\n          data: {\n            tasks: updatedTasks\n          }\n        });\n      }\n    });\n  }\n  function updateTaskDone(index, done) {\n    const taskId = tasksData.tasks[index].id;\n    updateTaskDoneMutation({\n      variables: {\n        id: taskId,\n        token: currentUserToken,\n        done: done\n      },\n      update: cache => {\n        const existingTasks = cache.readQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          }\n        });\n        const updatedTasks = existingTasks.tasks.map((task, i) => {\n          if (i === index) {\n            return {\n              ...task,\n              done\n            };\n          }\n          return task;\n        });\n        cache.writeQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          },\n          data: {\n            tasks: updatedTasks\n          }\n        });\n      }\n    });\n  }\n  function renameTasks(index, newName) {\n    const taskId = tasksData.tasks[index].id;\n    updateTitleMutation({\n      variables: {\n        id: taskId,\n        token: currentUserToken,\n        input: {\n          name: newName\n        }\n      },\n      update: (cache, _ref2) => {\n        let {\n          data\n        } = _ref2;\n        const existingTasks = cache.readQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          }\n        });\n        const updatedTasks = existingTasks.tasks.map(task => {\n          if (task.id === taskId) {\n            return {\n              ...task,\n              taskName: newName\n            };\n          }\n          return task;\n        });\n        cache.writeQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          },\n          data: {\n            tasks: updatedTasks\n          }\n        });\n      }\n    }).catch(error => {\n      if (error.message.includes('version_conflict_engine_exception') && error.message.includes('version conflict')) {} else {\n        console.error(error);\n      }\n    });\n  }\n  function getMessage() {\n    const percentage = numberTotal === 0 ? 0 : numberComplete / numberTotal * 100;\n    if (percentage === 0) {\n      return 'no tasks complete ðŸ˜¾';\n    }\n    if (percentage === 100) {\n      return 'nice job! ðŸ˜»';\n    }\n    return 'keep it up! ðŸ˜¼';\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      children: /*#__PURE__*/_jsxDEV(Navitem, {\n        children: /*#__PURE__*/_jsxDEV(DropdownMenu, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [numberComplete, \"/\", numberTotal, \" Complete\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: getMessage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      onAdd: AddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taskContainer\",\n      children: tasks.map((task, index) => /*#__PURE__*/_createElement(Task, {\n        ...task,\n        key: index,\n        onRename: newName => renameTasks(index, newName),\n        onTrash: () => removeTask(index),\n        onToggle: done => updateTaskDone(index, done),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"SEJ91LtnY7rRHXOwkzgbfDXJDKw=\", false, function () {\n  return [useQuery, useMutation, useMutation, useMutation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useQuery","useMutation","GET_TASKS","TASK_DONE","DELETE_TASK","UPDATE_TITLE","ADD_TASK","Task","React","TaskForm","DropdownMenu","Navbar","Navitem","AddTask","jsxDEV","_jsxDEV","createElement","_createElement","App","_s2","_tasksData$tasks","_s","$RefreshSig$","currentUserToken","JSON","parse","localStorage","getItem","currentUserName","data","tasksData","variables","token","userName","updateTitleMutation","deletedTaskMutation","updateTaskDoneMutation","tasks","numberComplete","filter","t","done","length","numberTotal","setItem","stringify","console","log","taskName","addTaskMutation","input","name","update","cache","_ref","existingTasks","readQuery","query","newTask","id","updatedTasks","writeQuery","removeTask","index","taskId","task","updateTaskDone","map","i","renameTasks","newName","_ref2","catch","error","message","includes","getMessage","percentage","children","fileName","_jsxFileName","lineNumber","columnNumber","onAdd","className","key","onRename","onTrash","onToggle","__self","__source","_c","$RefreshReg$"],"sources":["/Users/andrea/Desktop/ITS Prodigi/Seacom/Application/Todo/Full Stack ToDo login elasticEmongo/client/src/App.js"],"sourcesContent":["import  { useEffect } from \"react\";\nimport  {useQuery,useMutation} from '@apollo/client'\nimport  {GET_TASKS,TASK_DONE,DELETE_TASK,UPDATE_TITLE,ADD_TASK} from './queries/query';\nimport  './App.css';\nimport  Task from './components/Task';\nimport  React from 'react';\nimport  TaskForm from './components/TaskForm';\nimport  DropdownMenu from './components/navbar/dropdown'\nimport  Navbar from './components/navbar/nav'\nimport  Navitem from './components/navbar/item'\nimport  AddTask from './components/functions/AddTask'\n\nfunction App() {\n  const currentUserToken = JSON.parse(localStorage.getItem('currentUser'));\n  const currentUserName = JSON.parse(localStorage.getItem('currentUserName'));\n  const { data: tasksData } = useQuery(GET_TASKS,{    \n    variables: {\n    token: currentUserToken,\n    userName: currentUserName\n  }\n});\n\n  const [updateTitleMutation] = useMutation(UPDATE_TITLE)\n  const [deletedTaskMutation] = useMutation(DELETE_TASK)\n  const [updateTaskDoneMutation] = useMutation(TASK_DONE)\n\n  const tasks = tasksData?.tasks ?? [];\n  const numberComplete = tasks.filter(t => t.done).length;\n  const numberTotal = tasks.length;\n  \n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    console.log('action from user:' + currentUserToken);\n  },[tasks]);\n\n  function AddTask(taskName) {\n    const [addTaskMutation] = useMutation(ADD_TASK)\n    addTaskMutation({\n      variables: {\n        input: {\n          name: taskName\n        },\n        token: currentUserToken,\n        userName: currentUserName\n      },\n      update: (cache, { data }) => {\n        const existingTasks = cache.readQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          }\n        });\n        const newTask = {\n          userName: currentUserName,\n          token: currentUserToken,\n          taskName: data.newTask.taskName,\n          done: false,\n          id: data.newTask.id\n        };\n        const updatedTasks = [...existingTasks.tasks, newTask];\n        cache.writeQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          },\n          data: { tasks: updatedTasks }\n        });\n      },\n    });\n  }\n\n  function removeTask(index) {\n    const taskId = tasksData.tasks[index].id; \n    deletedTaskMutation({\n      variables: {\n        id: taskId,\n        token: currentUserToken\n      },\n      update: (cache) => {\n        const existingTasks = cache.readQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          }\n        });\n        const updatedTasks = existingTasks.tasks.filter((task) => task.id !== taskId);\n        cache.writeQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          },\n          data: { tasks: updatedTasks }\n        });\n      },\n    });\n  }\n  \n  function updateTaskDone(index, done) {\n    const taskId = tasksData.tasks[index].id;\n    updateTaskDoneMutation({\n      variables: {\n        id: taskId,\n        token: currentUserToken,\n        done:done\n      },\n      update: (cache) => {\n        const existingTasks = cache.readQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          }\n        });\n        const updatedTasks = existingTasks.tasks.map((task, i) => {\n          if (i === index) {\n            return { ...task, done };\n          }\n          return task;\n        });\n        cache.writeQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          },\n          data: { tasks: updatedTasks }\n        });\n      }\n    });\n  }\n  \n  function renameTasks(index, newName) {\n    const taskId = tasksData.tasks[index].id;\n    updateTitleMutation({\n      variables: {\n        id: taskId,\n        token: currentUserToken,\n        input: {\n          name: newName\n        }\n      },\n      update: (cache, { data }) => {\n        const existingTasks = cache.readQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          }\n        });\n        const updatedTasks = existingTasks.tasks.map(task => {\n          if (task.id === taskId) {\n            return { ...task, taskName: newName };\n          }\n          return task;\n        });\n        cache.writeQuery({\n          query: GET_TASKS,\n          variables: {\n            token: currentUserToken,\n            userName: currentUserName\n          },\n          data: { tasks: updatedTasks }\n        });\n      }\n    }).catch(error => {\n      if (\n        error.message.includes('version_conflict_engine_exception') &&\n        error.message.includes('version conflict')\n      ) {\n      } else {\n        console.error(error);\n      }\n    });\n  }  \n\n  function getMessage() {\n    const percentage = numberTotal === 0 ? 0 : (numberComplete / numberTotal) * 100;\n    if (percentage === 0) {\n      return 'no tasks complete ðŸ˜¾';\n    }\n    if (percentage === 100) {\n      return 'nice job! ðŸ˜»';\n    }\n    return 'keep it up! ðŸ˜¼';\n  }\n\n    return (\n    <main>\n    <Navbar>\n      <Navitem>\n        <DropdownMenu/>\n      </Navitem>\n    </Navbar>\n      <h1>{numberComplete}/{numberTotal} Complete</h1>\n      <h2>{getMessage()}</h2>\n      <TaskForm onAdd={AddTask}/>\n      <div className=\"taskContainer\">\n        {tasks.map((task, index) => (\n          <Task\n            {...task}\n            key={index}\n            onRename={newName => renameTasks(index, newName)}\n            onTrash={() => removeTask(index)}\n            onToggle={done => updateTaskDone(index, done)}\n          />\n          ))}\n    </div>\n    </main>\n  )\n}\n\nexport default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}