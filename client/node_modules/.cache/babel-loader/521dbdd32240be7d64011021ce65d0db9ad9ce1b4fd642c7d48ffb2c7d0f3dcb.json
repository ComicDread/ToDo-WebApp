{"ast":null,"code":"var _jsxFileName = \"/Users/andrea/Desktop/ITS Prodigi/Seacom/Application/Todo/Full Stack ToDo login/client/src/components/Login.js\",\n  _s = $RefreshSig$();\nimport { GoogleLogin, GoogleOAuthProvider } from '@react-oauth/google';\nimport jwt_decode from 'jwt-decode';\nimport { useState, useEffect } from 'react';\nimport './components.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_TASKS = gql`\n  query tasks {\n    tasks {\n      name\n      done\n      id\n    }\n  }\n`;\nconst GET_USER = gql`\n  query users {\n    users {\n      name\n      token\n      isLoggedIn\n    }\n  }\n`;\nconst NEW_USER = gql`\n  mutation newUser($token:String! $name:String! $tasks:[userInput]) {\n    newUser(token:$token name:$name tasks:$tasks) {\n      name\n      token\n      tasks{\n      name\n      done\n      id\n    }\n    }\n  }\n`;\nexport default function Login() {\n  _s();\n  const navigate = useNavigate();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const {\n    data: tasksData\n  } = useQuery(GET_TASKS);\n  const {\n    data: userData\n  } = useQuery(GET_USER);\n  const [newUserMutation] = useMutation(NEW_USER);\n  const handleSuccess = async credentialResponse => {\n    var decoded = jwt_decode(credentialResponse.credential);\n    const storedUsers = JSON.parse(localStorage.getItem('users')) || [];\n    const existingUser = storedUsers.find(storedUser => storedUser.token === decoded.sub);\n    const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    const user = {\n      name: decoded.name,\n      token: decoded.sub,\n      tasks: tasks\n    };\n    console.log(user);\n    if (!existingUser) {\n      await newUserMutation({\n        variables: {\n          token: decoded.sub,\n          name: decoded.name,\n          isLoggedIn: true,\n          tasks: tasks\n        },\n        update: (cache, _ref) => {\n          let {\n            data\n          } = _ref;\n          const existingUser = cache.readQuery({\n            query: GET_USER\n          });\n          const newUser = {\n            name: data.newUser.name,\n            done: false,\n            id: data.newUser.id\n          };\n          const updatedUser = [...existingUser.user, newUser];\n          cache.writeQuery({\n            query: GET_USER,\n            data: {\n              users: updatedUser\n            }\n          });\n        }\n      });\n    } else {\n      setIsLoggedIn(true);\n    }\n    navigate('/');\n  };\n  const handleError = () => {\n    console.log('Login Failed');\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"signInButton\",\n    children: /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n      clientId: \"1038509275601-a2gf0vtu5pt81as8586gt0hsqrqis0mh.apps.googleusercontent.com\",\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: handleSuccess,\n        onError: handleError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"UqtfCBI/98cQq5pJVtZO13O5/kg=\", false, function () {\n  return [useNavigate, useQuery, useQuery, useMutation];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["GoogleLogin","GoogleOAuthProvider","jwt_decode","useState","useEffect","useNavigate","useQuery","gql","useMutation","jsxDEV","_jsxDEV","GET_TASKS","GET_USER","NEW_USER","Login","_s","navigate","isLoggedIn","setIsLoggedIn","data","tasksData","userData","newUserMutation","handleSuccess","credentialResponse","decoded","credential","storedUsers","JSON","parse","localStorage","getItem","existingUser","find","storedUser","token","sub","tasks","user","name","console","log","variables","update","cache","_ref","readQuery","query","newUser","done","id","updatedUser","writeQuery","users","handleError","children","clientId","onSuccess","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andrea/Desktop/ITS Prodigi/Seacom/Application/Todo/Full Stack ToDo login/client/src/components/Login.js"],"sourcesContent":["import { GoogleLogin, GoogleOAuthProvider } from '@react-oauth/google';\nimport jwt_decode from 'jwt-decode';\nimport { useState, useEffect } from 'react';\nimport './components.css';\nimport { useNavigate } from 'react-router-dom';\nimport {useQuery,gql,useMutation} from '@apollo/client'\n\nconst GET_TASKS = gql`\n  query tasks {\n    tasks {\n      name\n      done\n      id\n    }\n  }\n`;\n\nconst GET_USER = gql`\n  query users {\n    users {\n      name\n      token\n      isLoggedIn\n    }\n  }\n`;\n\nconst NEW_USER = gql`\n  mutation newUser($token:String! $name:String! $tasks:[userInput]) {\n    newUser(token:$token name:$name tasks:$tasks) {\n      name\n      token\n      tasks{\n      name\n      done\n      id\n    }\n    }\n  }\n`;\n\nexport default function Login() {\n  const navigate = useNavigate();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const { data: tasksData } = useQuery(GET_TASKS)\n  const { data: userData} = useQuery(GET_USER)\n  const [newUserMutation] = useMutation(NEW_USER)\n\n  const handleSuccess = async (credentialResponse) => {\n    var decoded = jwt_decode(credentialResponse.credential);\n    const storedUsers = JSON.parse(localStorage.getItem('users')) || [];\n    const existingUser = storedUsers.find((storedUser) => storedUser.token === decoded.sub);\n    const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    const user = {\n      name: decoded.name,\n      token: decoded.sub,\n      tasks: tasks,\n    };\n    console.log(user);\n    \n    if (!existingUser) {\n      await newUserMutation({\n        variables: {\n          token: decoded.sub,\n          name: decoded.name,\n          isLoggedIn: true,\n          tasks: tasks,\n        },\n        update: (cache, { data }) => {\n          const existingUser = cache.readQuery({ query: GET_USER });\n          const newUser = {\n            name: data.newUser.name,\n            done: false,\n            id: data.newUser.id,\n          };\n          const updatedUser = [...existingUser.user, newUser];\n          cache.writeQuery({\n            query: GET_USER,\n            data: { users: updatedUser }\n          });\n        }\n      });\n    }\n    else {\n      setIsLoggedIn(true);\n    }\n    navigate('/');\n  };\n  \n  \n  \n  const handleError = () => {\n    console.log('Login Failed');\n    setIsLoggedIn(false);\n  };\n\n  \n\n  return (\n    <div id=\"signInButton\">\n        <GoogleOAuthProvider clientId=\"1038509275601-a2gf0vtu5pt81as8586gt0hsqrqis0mh.apps.googleusercontent.com\">\n          <GoogleLogin onSuccess={handleSuccess} onError={handleError} />\n        </GoogleOAuthProvider>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}