{"ast":null,"code":"var _jsxFileName = \"/Users/andrea/Desktop/ITS Prodigi/Seacom/Application/Todo/Full Stack ToDo login/client/src/components/Login.js\",\n  _s = $RefreshSig$();\nimport { GoogleLogin, GoogleOAuthProvider } from '@react-oauth/google';\nimport jwt_decode from 'jwt-decode';\nimport { useState, useEffect } from 'react';\nimport './components.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_TASKS = gql`\n  query tasks {\n    tasks {\n      name\n      done\n      id\n    }\n  }\n`;\nconst GET_USER = gql`\n  query users {\n    users {\n      name\n      token\n      tasks{\n        name\n        done\n        id\n      }\n    }\n  }\n`;\nconst NEW_USER = gql`\n  mutation newUser($token:String! $name:String! $tasks:[userInput]) {\n    newUser(token:$token name:$name tasks:$tasks) {\n      name\n      token\n      tasks{\n      name\n      done\n      id\n    }\n    }\n  }\n`;\nexport default function Login() {\n  _s();\n  var _userData$users;\n  const navigate = useNavigate();\n  const {\n    data: tasksData\n  } = useQuery(GET_TASKS);\n  const {\n    data: userData\n  } = useQuery(GET_USER);\n  const [newUserMutation] = useMutation(NEW_USER);\n  const users = (_userData$users = userData === null || userData === void 0 ? void 0 : userData.users) !== null && _userData$users !== void 0 ? _userData$users : [];\n  const handleSuccess = async credentialResponse => {\n    var _userData$users2;\n    var decoded = jwt_decode(credentialResponse.credential);\n    const users = (_userData$users2 = userData === null || userData === void 0 ? void 0 : userData.users) !== null && _userData$users2 !== void 0 ? _userData$users2 : [];\n    const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    const existingUser = users.find(users => users.token === decoded.sub);\n    if (!existingUser) {\n      const tasksWithoutTypename = tasks.map(_ref => {\n        let {\n          __typename,\n          ...rest\n        } = _ref;\n        return rest;\n      });\n      await newUserMutation({\n        variables: {\n          token: decoded.sub,\n          name: decoded.name,\n          tasks: tasksWithoutTypename\n        },\n        update: (cache, _ref2) => {\n          let {\n            data\n          } = _ref2;\n          const existingUser = cache.readQuery({\n            query: GET_USER\n          });\n          const newUser = {\n            token: data.newUser.token,\n            name: data.newUser.name,\n            done: false,\n            tasks: data.newUser.tasks\n          };\n          const updatedUser = [...existingUser.users, newUser];\n          cache.writeQuery({\n            query: GET_USER,\n            data: {\n              users: updatedUser\n            }\n          });\n        }\n      });\n    }\n    navigate('/');\n  };\n  const handleError = () => {\n    console.log('Login Failed');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"signInButton\",\n    children: /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n      clientId: \"1038509275601-a2gf0vtu5pt81as8586gt0hsqrqis0mh.apps.googleusercontent.com\",\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: handleSuccess,\n        onError: handleError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"xl5jakGv04xNGcE4V9ELTNYLb/E=\", false, function () {\n  return [useNavigate, useQuery, useQuery, useMutation];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["GoogleLogin","GoogleOAuthProvider","jwt_decode","useState","useEffect","useNavigate","useQuery","gql","useMutation","jsxDEV","_jsxDEV","GET_TASKS","GET_USER","NEW_USER","Login","_s","_userData$users","navigate","data","tasksData","userData","newUserMutation","users","handleSuccess","credentialResponse","_userData$users2","decoded","credential","tasks","JSON","parse","localStorage","getItem","existingUser","find","token","sub","tasksWithoutTypename","map","_ref","__typename","rest","variables","name","update","cache","_ref2","readQuery","query","newUser","done","updatedUser","writeQuery","handleError","console","log","id","children","clientId","onSuccess","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andrea/Desktop/ITS Prodigi/Seacom/Application/Todo/Full Stack ToDo login/client/src/components/Login.js"],"sourcesContent":["import { GoogleLogin, GoogleOAuthProvider } from '@react-oauth/google';\nimport jwt_decode from 'jwt-decode';\nimport { useState, useEffect } from 'react';\nimport './components.css';\nimport { useNavigate } from 'react-router-dom';\nimport {useQuery,gql,useMutation} from '@apollo/client'\n\nconst GET_TASKS = gql`\n  query tasks {\n    tasks {\n      name\n      done\n      id\n    }\n  }\n`;\n\nconst GET_USER = gql`\n  query users {\n    users {\n      name\n      token\n      tasks{\n        name\n        done\n        id\n      }\n    }\n  }\n`;\n\nconst NEW_USER = gql`\n  mutation newUser($token:String! $name:String! $tasks:[userInput]) {\n    newUser(token:$token name:$name tasks:$tasks) {\n      name\n      token\n      tasks{\n      name\n      done\n      id\n    }\n    }\n  }\n`;\n\nexport default function Login() {\n  const navigate = useNavigate();\n  const { data: tasksData } = useQuery(GET_TASKS)\n  const { data: userData} = useQuery(GET_USER)\n  const [newUserMutation] = useMutation(NEW_USER)\n  const users = userData?.users ?? []; \n\n  const handleSuccess = async (credentialResponse) => {\n    var decoded = jwt_decode(credentialResponse.credential);\n    const users = userData?.users ?? []; \n    const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    const existingUser = users.find((users) => users.token === decoded.sub);\n    if (!existingUser) {\n      const tasksWithoutTypename = tasks.map(({ __typename, ...rest }) => rest);\n      await newUserMutation({\n        variables: {\n          token: decoded.sub,\n          name: decoded.name,\n          tasks: tasksWithoutTypename,\n        },\n        update: (cache, { data }) => {\n          const existingUser = cache.readQuery({ query: GET_USER });\n          const newUser = {\n            token: data.newUser.token,\n            name: data.newUser.name,\n            done: false,\n            tasks: data.newUser.tasks,\n          };\n          const updatedUser = [...existingUser.users, newUser];\n          cache.writeQuery({\n            query: GET_USER,\n            data: { users: updatedUser }\n          });\n        }\n      });\n    }\n    navigate('/');\n  };\n  \n  \n  \n  const handleError = () => {\n    console.log('Login Failed');\n  };\n\n  \n\n  return (\n    <div id=\"signInButton\">\n        <GoogleOAuthProvider clientId=\"1038509275601-a2gf0vtu5pt81as8586gt0hsqrqis0mh.apps.googleusercontent.com\">\n          <GoogleLogin onSuccess={handleSuccess} onError={handleError} />\n        </GoogleOAuthProvider>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}