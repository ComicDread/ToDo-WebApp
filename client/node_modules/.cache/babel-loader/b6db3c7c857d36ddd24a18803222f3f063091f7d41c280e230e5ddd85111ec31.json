{"ast":null,"code":"var _jsxFileName = \"/Users/andrea/Desktop/ITS Prodigi/Seacom/Application/Todo/Full Stack ToDo login/client/src/components/Login.js\",\n  _s = $RefreshSig$();\nimport { GoogleLogin, GoogleOAuthProvider } from '@react-oauth/google';\nimport jwt_decode from 'jwt-decode';\nimport { useState, useEffect } from 'react';\nimport './components.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_TASKS = gql`\n  query tasks {\n    tasks {\n      name\n      done\n      id\n    }\n  }\n`;\nconst GET_USER = gql`\n  query users {\n    users {\n      name\n      token\n      tasks\n      isLoggedIn\n    }\n  }\n`;\nconst NEW_USER = gql`\n  mutation newUser($token:String! $name:String! $isLoggedIn:Boolean! $tasks:[userInput]) {\n    newUser(token:$token name:$name tasks:$tasks isLoggedIn:$isLoggedIn) {\n      name\n      tasks {\n      name\n      done\n      id\n    }\n      token\n      isLoggedIn\n    }\n  }\n`;\nexport default function Login() {\n  _s();\n  const navigate = useNavigate();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const {\n    data: tasksData\n  } = useQuery(GET_TASKS);\n  const {\n    data: userData\n  } = useQuery(GET_USER);\n  const [newUserMutation] = useMutation(NEW_USER);\n  const handleSuccess = async credentialResponse => {\n    var decoded = jwt_decode(credentialResponse.credential);\n    const storedUsers = JSON.parse(localStorage.getItem('users')) || [];\n    const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    const user = {\n      name: decoded.name,\n      token: decoded.sub,\n      isLoggedIn: true,\n      tasks: tasks\n    };\n    const existingUser = storedUsers.find(storedUser => storedUser.token === decoded.sub);\n    if (!existingUser) {\n      await newUserMutation({\n        variables: {\n          token: decoded.sub,\n          name: decoded.name,\n          isLoggedIn: true,\n          tasks: tasks\n        },\n        update: (cache, _ref) => {\n          let {\n            data\n          } = _ref;\n          const existingUsers = cache.readQuery({\n            query: GET_USER\n          });\n          const newUser = {\n            name: data.newUser.name,\n            tasks: data.newUser.tasks,\n            token: data.newUser.token,\n            isLoggedIn: data.newUser.isLoggedIn,\n            __typename: 'User'\n          };\n          const updatedUsers = [...existingUsers.users, newUser];\n          cache.modify({\n            fields: {\n              users(existingUsersRef) {\n                return [...existingUsersRef, newUser];\n              }\n            }\n          });\n        }\n      });\n    } else {\n      setIsLoggedIn(true);\n    }\n    navigate('/');\n  };\n  const handleError = () => {\n    console.log('Login Failed');\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"signInButton\",\n    children: /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n      clientId: \"1038509275601-a2gf0vtu5pt81as8586gt0hsqrqis0mh.apps.googleusercontent.com\",\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: handleSuccess,\n        onError: handleError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"UqtfCBI/98cQq5pJVtZO13O5/kg=\", false, function () {\n  return [useNavigate, useQuery, useQuery, useMutation];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["GoogleLogin","GoogleOAuthProvider","jwt_decode","useState","useEffect","useNavigate","useQuery","gql","useMutation","jsxDEV","_jsxDEV","GET_TASKS","GET_USER","NEW_USER","Login","_s","navigate","isLoggedIn","setIsLoggedIn","data","tasksData","userData","newUserMutation","handleSuccess","credentialResponse","decoded","credential","storedUsers","JSON","parse","localStorage","getItem","tasks","user","name","token","sub","existingUser","find","storedUser","variables","update","cache","_ref","existingUsers","readQuery","query","newUser","__typename","updatedUsers","users","modify","fields","existingUsersRef","handleError","console","log","id","children","clientId","onSuccess","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andrea/Desktop/ITS Prodigi/Seacom/Application/Todo/Full Stack ToDo login/client/src/components/Login.js"],"sourcesContent":["import { GoogleLogin, GoogleOAuthProvider } from '@react-oauth/google';\nimport jwt_decode from 'jwt-decode';\nimport { useState, useEffect } from 'react';\nimport './components.css';\nimport { useNavigate } from 'react-router-dom';\nimport {useQuery,gql,useMutation} from '@apollo/client'\n\nconst GET_TASKS = gql`\n  query tasks {\n    tasks {\n      name\n      done\n      id\n    }\n  }\n`;\n\nconst GET_USER = gql`\n  query users {\n    users {\n      name\n      token\n      tasks\n      isLoggedIn\n    }\n  }\n`;\n\nconst NEW_USER = gql`\n  mutation newUser($token:String! $name:String! $isLoggedIn:Boolean! $tasks:[userInput]) {\n    newUser(token:$token name:$name tasks:$tasks isLoggedIn:$isLoggedIn) {\n      name\n      tasks {\n      name\n      done\n      id\n    }\n      token\n      isLoggedIn\n    }\n  }\n`;\n\nexport default function Login() {\n  const navigate = useNavigate();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const { data: tasksData } = useQuery(GET_TASKS)\n  const { data: userData} = useQuery(GET_USER)\n  const [newUserMutation] = useMutation(NEW_USER)\n\n  const handleSuccess = async (credentialResponse) => {\n    var decoded = jwt_decode(credentialResponse.credential);\n    const storedUsers = JSON.parse(localStorage.getItem('users')) || [];\n    const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    const user = {\n      name: decoded.name,\n      token: decoded.sub,\n      isLoggedIn: true,\n      tasks: tasks,\n    };\n    const existingUser = storedUsers.find((storedUser) => storedUser.token === decoded.sub);\n    if (!existingUser) {\n      await newUserMutation({\n        variables: {\n          token: decoded.sub,\n          name: decoded.name,\n          isLoggedIn: true,\n          tasks: tasks,\n        },\n        update: (cache, { data }) => {\n          const existingUsers = cache.readQuery({ query: GET_USER });\n          const newUser = {\n            name: data.newUser.name,\n            tasks: data.newUser.tasks,\n            token: data.newUser.token,\n            isLoggedIn: data.newUser.isLoggedIn,\n            __typename: 'User',\n          };\n          const updatedUsers = [...existingUsers.users, newUser];\n          cache.modify({\n            fields: {\n              users(existingUsersRef) {\n                return [...existingUsersRef, newUser];\n              },\n            },\n          });\n        },\n      });       \n      }else {\n      setIsLoggedIn(true);\n    }\n  \n    navigate('/');\n  };\n  \n  \n  const handleError = () => {\n    console.log('Login Failed');\n    setIsLoggedIn(false);\n  };\n\n  \n\n  return (\n    <div id=\"signInButton\">\n        <GoogleOAuthProvider clientId=\"1038509275601-a2gf0vtu5pt81as8586gt0hsqrqis0mh.apps.googleusercontent.com\">\n          <GoogleLogin onSuccess={handleSuccess} onError={handleError} />\n        </GoogleOAuthProvider>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}